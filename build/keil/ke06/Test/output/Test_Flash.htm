<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Test_Flash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Test_Flash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Jul 01 19:49:15 2021
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Task_Dg_Scan &rArr; Ign_StatScan &rArr; Read_IgnPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1d]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ACMP0_IRQHandler</a><BR>
 <LI><a href="#[7b]">UART_PutChar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">UART_PutChar</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ACMP0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[22]">ACMP1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[31]">ADC0_Task</a> from input.o(i.ADC0_Task) referenced from system.o(i.System_AdcInit)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[5]">ADC_Isr</a> from adc.o(i.ADC_Isr) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[1e]">FTM0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[1f]">FTM1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[20]">FTM2_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[12]">FTMRE_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[15]">I2C0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[2]">I2C0_Isr</a> from i2c.o(i.I2C0_Isr) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[32]">I2C0_Task</a> from system.o(i.I2C0_Task) referenced from system.o(i.System_I2cInit)
 <LI><a href="#[16]">I2C1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[28]">ICS_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[14]">IRQ_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[25]">KBI0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[26]">KBI1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[2b]">MSCAN_RX_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[2c]">MSCAN_TX_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[34]">PIT0_Task</a> from system.o(i.PIT0_Task) referenced from system.o(i.System_PitInit)
 <LI><a href="#[33]">PIT1_Task</a> from system.o(i.PIT1_Task) referenced from system.o(i.System_PitInit)
 <LI><a href="#[23]">PIT_CH0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[24]">PIT_CH1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[6]">PIT_Ch0Isr</a> from pit.o(i.PIT_Ch0Isr) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[7]">PIT_Ch1Isr</a> from pit.o(i.PIT_Ch1Isr) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[13]">PMC_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[2a]">PWT_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[d]">Reserved16_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[e]">Reserved17_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[f]">Reserved18_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[10]">Reserved19_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[11]">Reserved20_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[27]">Reserved42_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from crto.o(.text) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[0]">Reset_Handler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[17]">SPI0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[3]">SPI0_Isr</a> from spi.o(i.SPI0_Isr) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[35]">SPI0_Task</a> from motorctrl.o(i.SPI0_Task) referenced from system.o(i.System_SpiInit)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from start.o(i.SystemInit) referenced from crto.o(.text)
 <LI><a href="#[19]">UART0_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[4]">UART0_Isr</a> from uart.o(i.UART0_Isr) referenced from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[36]">UART0_Task</a> from lin_slave.o(i.UART0_Task) referenced from system.o(i.System_UartInit)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[1b]">UART2_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[29]">WDOG_IRQHandler</a> from crto.o(.text) referenced from crto.o(RESET)
 <LI><a href="#[30]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from crto.o(.text)
 <LI><a href="#[1]">default_isr</a> from vectors.o(i.default_isr) referenced 40 times from vectors.o(.ARM.__AT_0x00000000)
 <LI><a href="#[37]">fputc</a> from io.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2f]">init_data_bss</a> from crto.o(.text) referenced from crto.o(.text)
 <LI><a href="#[2d]">main</a> from test.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3a]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[ba]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[bb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2f]"></a>init_data_bss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
<LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crto.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crto.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crto.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crto.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crto.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FTMRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>KBI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>KBI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MSCAN_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MSCAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, crto.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> crto.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMsg_Enqueue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMsg_Dequeue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLinQueFull
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>ADC0_Task</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, input.o(i.ADC0_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC0_Task &rArr; ADC_OnEnd &rArr; ADC_GetValue16
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_OnEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.System_AdcInit)
</UL>
<P><STRONG><a name="[47]"></a>ADC_GetValue16</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, input.o(i.ADC_GetValue16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetValue16
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_OnEnd
</UL>

<P><STRONG><a name="[5]"></a>ADC_Isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.ADC_Isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[45]"></a>ADC_Measure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, input.o(i.ADC_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Measure &rArr; ADC_Start_Conver
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_Conver
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
</UL>

<P><STRONG><a name="[44]"></a>ADC_OnEnd</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, input.o(i.ADC_OnEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_OnEnd &rArr; ADC_GetValue16
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue16
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Task
</UL>

<P><STRONG><a name="[49]"></a>ADC_SelectClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SelectClock))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4a]"></a>ADC_SelectClockDivide</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SelectClockDivide))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[92]"></a>ADC_SetCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.ADC_SetCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AdcInit
</UL>

<P><STRONG><a name="[43]"></a>ADC_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_Conver
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Task
</UL>

<P><STRONG><a name="[4c]"></a>ADC_SetFifoLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SetFifoLevel))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[b2]"></a>Lcd_Display_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, displaylcd.o(i.Lcd_Display_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>OutputCtrl_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, output.o(i.OutputCtrl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>ADC_Init</STRONG> (Thumb, 248 bytes, Stack size 12 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetFifoLevel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClockDivide
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClock
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AdcInit
</UL>

<P><STRONG><a name="[4b]"></a>ADC_SetMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[46]"></a>ADC_Start_Conver</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, input.o(i.ADC_Start_Conver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Start_Conver
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Measure
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Ad_Scan
</UL>

<P><STRONG><a name="[4d]"></a>AcOc_StatScan</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, input.o(i.AcOc_StatScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AcOc_StatScan &rArr; Read_AcOcPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AcOcPinStat
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dg_Scan
</UL>

<P><STRONG><a name="[51]"></a>AdValue_Conver</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, input.o(i.AdValue_Conver))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AdValue_Conver &rArr; SW2_ADValue_Conver &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2_ADValue_Conver
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_ADValue_Conver
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeMotorFB_ADValue_Conver
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixMotorFB_ADValue_Conver
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvapTemp_ADValue_Conver
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batter_ADValue_Conver
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Ad_Scan
</UL>

<P><STRONG><a name="[52]"></a>Batter_ADValue_Conver</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, input.o(i.Batter_ADValue_Conver))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Batter_ADValue_Conver &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
</UL>

<P><STRONG><a name="[57]"></a>EvapTemp_ADValue_Conver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, input.o(i.EvapTemp_ADValue_Conver))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
</UL>

<P><STRONG><a name="[58]"></a>FEI_to_FBE_OSC</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ics.o(i.FEI_to_FBE_OSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FEI_to_FBE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[5b]"></a>FEI_to_FEE</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ics.o(i.FEI_to_FEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FEI_to_FEE &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[5c]"></a>FEI_to_FEE_OSC</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ics.o(i.FEI_to_FEE_OSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FEI_to_FEE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[9d]"></a>FTM_ClockSet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ftm.o(i.FTM_ClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_ClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PwmInit
</UL>

<P><STRONG><a name="[5d]"></a>FTM_PWMInit</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ftm.o(i.FTM_PWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FTM_PWMInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PwmInit
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_PinClear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.GPIO_PinClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinClear &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[60]"></a>GPIO_PinInit</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GpioInit
</UL>

<P><STRONG><a name="[61]"></a>GPIO_PinSet</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.GPIO_PinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GpioInit
</UL>

<P><STRONG><a name="[62]"></a>GPIO_Read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(i.GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
</UL>

<P><STRONG><a name="[63]"></a>GPIO_ReadPin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, input.o(i.GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IgnPinStat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AcOcPinStat
</UL>

<P><STRONG><a name="[7e]"></a>Get1SecTickInterval</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, tick.o(i.Get1SecTickInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get1SecTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeMotor_MoveSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixMotor_MoveSet
</UL>

<P><STRONG><a name="[7f]"></a>Get1SecTickVal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tick.o(i.Get1SecTickVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get1SecTickVal
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeMotor_MoveSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixMotor_MoveSet
</UL>

<P><STRONG><a name="[4e]"></a>Get2MsTickInterval</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, tick.o(i.Get2MsTickInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get2MsTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2_ADValue_Conver
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_ADValue_Conver
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ign_StatScan
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batter_ADValue_Conver
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcOc_StatScan
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dg_Ctrl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Ad_Scan
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Send
</UL>

<P><STRONG><a name="[50]"></a>Get2MsTickVal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tick.o(i.Get2MsTickVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get2MsTickVal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2_ADValue_Conver
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_ADValue_Conver
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ign_StatScan
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Batter_ADValue_Conver
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcOc_StatScan
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dg_Ctrl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Ad_Scan
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Send
</UL>

<P><STRONG><a name="[2]"></a>I2C0_Isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(i.I2C0_Isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[95]"></a>I2C0_SetCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i.I2C0_SetCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_I2cInit
</UL>

<P><STRONG><a name="[32]"></a>I2C0_Task</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, system.o(i.I2C0_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C0_Task &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.System_I2cInit)
</UL>
<P><STRONG><a name="[67]"></a>I2C_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddress
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSCLLowTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_I2cInit
</UL>

<P><STRONG><a name="[66]"></a>I2C_IntDisable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i2c.o(i.I2C_IntDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IntDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Task
</UL>

<P><STRONG><a name="[69]"></a>I2C_SetSCLLowTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2C_SetSCLLowTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[68]"></a>I2C_SetSlaveAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(i.I2C_SetSlaveAddress))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[65]"></a>I2C_Stop</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, i2c.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Task
</UL>

<P><STRONG><a name="[64]"></a>I2C_WriteOneByte</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, i2c.o(i.I2C_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Task
</UL>

<P><STRONG><a name="[6c]"></a>ICS_Init</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, ics.o(i.ICS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICS_Init &rArr; FEI_to_FEE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[5a]"></a>ICS_SetClkDivider</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ics.o(i.ICS_SetClkDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>

<P><STRONG><a name="[8a]"></a>ICS_Trim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ics.o(i.ICS_Trim))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[6d]"></a>Ign_StatScan</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, input.o(i.Ign_StatScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ign_StatScan &rArr; Read_IgnPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IgnPinStat
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dg_Scan
</UL>

<P><STRONG><a name="[6f]"></a>Input_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, input.o(i.Input_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Input_Init &rArr; Read_IgnPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IgnPinStat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AcOcPinStat
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Measure
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>IsLinQueEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lin_slave.o(i.IsLinQueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_RecvHandle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMsg_Dequeue
</UL>

<P><STRONG><a name="[34]"></a>PIT0_Task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.PIT0_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT0_Task &rArr; TPM_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.System_PitInit)
</UL>
<P><STRONG><a name="[33]"></a>PIT1_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.PIT1_Task))
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.System_PitInit)
</UL>
<P><STRONG><a name="[b3]"></a>Task_Fan_Ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, output.o(i.Task_Fan_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Task_Lcd_Display</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, displaylcd.o(i.Task_Lcd_Display))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>IsLinQueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lin_slave.o(i.IsLinQueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsLinQueFull &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMsg_Enqueue
</UL>

<P><STRONG><a name="[a9]"></a>LIN_Checksum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lin_slave.o(i.LIN_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIN_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDataSendNodeData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDataSendDiagData
</UL>

<P><STRONG><a name="[73]"></a>LinMsg_Dequeue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lin_slave.o(i.LinMsg_Dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LinMsg_Dequeue &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLinQueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_RecvHandle
</UL>

<P><STRONG><a name="[75]"></a>LinMsg_Enqueue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lin_slave.o(i.LinMsg_Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LinMsg_Enqueue &rArr; IsLinQueFull &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLinQueFull
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Task
</UL>

<P><STRONG><a name="[77]"></a>LinRecvByte</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lin_slave.o(i.LinRecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinRecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_RecvHandle
</UL>

<P><STRONG><a name="[76]"></a>Lin_RecvHandle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lin_slave.o(i.Lin_RecvHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Lin_RecvHandle &rArr; LinMsg_Dequeue &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinRecvByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMsg_Dequeue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLinQueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LIN_Slave
</UL>

<P><STRONG><a name="[78]"></a>Lin_SendHandle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lin_slave.o(i.Lin_SendHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Lin_SendHandle &rArr; UART_EnableInterrupt &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDataSendNodeData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDataSendDiagData
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LIN_Slave
</UL>

<P><STRONG><a name="[b1]"></a>Lin_Slave_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lin_slave.o(i.Lin_Slave_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>MixMotorFB_ADValue_Conver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, input.o(i.MixMotorFB_ADValue_Conver))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
</UL>

<P><STRONG><a name="[7d]"></a>MixMotor_MoveSet</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, motorctrl.o(i.MixMotor_MoveSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MixMotor_MoveSet &rArr; Get1SecTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1SecTickVal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1SecTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Motor_Ctrl
</UL>

<P><STRONG><a name="[56]"></a>ModeMotorFB_ADValue_Conver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, input.o(i.ModeMotorFB_ADValue_Conver))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
</UL>

<P><STRONG><a name="[80]"></a>ModeMotor_MoveSet</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, motorctrl.o(i.ModeMotor_MoveSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModeMotor_MoveSet &rArr; Get1SecTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1SecTickVal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1SecTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Motor_Ctrl
</UL>

<P><STRONG><a name="[81]"></a>MotorControl_Send</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motorctrl.o(i.MotorControl_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorControl_Send &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE94108_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Motor_Ctrl
</UL>

<P><STRONG><a name="[83]"></a>Motor_Ctrl_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motorctrl.o(i.Motor_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_Ctrl_Init &rArr; GPIO_PinSet &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLE94108_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>OSC_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ics.o(i.OSC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>

<P><STRONG><a name="[6]"></a>PIT_Ch0Isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pit.o(i.PIT_Ch0Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_Ch0Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[7]"></a>PIT_Ch1Isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pit.o(i.PIT_Ch1Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_Ch1Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[85]"></a>PIT_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PitInit
</UL>

<P><STRONG><a name="[9c]"></a>PIT_SetCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pit.o(i.PIT_SetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PitInit
</UL>

<P><STRONG><a name="[88]"></a>Platform_Init</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, system.o(i.Platform_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Platform_Init &rArr; ICS_Init &rArr; FEI_to_FEE_OSC &rArr; ICS_SetClkDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Trim
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[4f]"></a>Read_AcOcPinStat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, input.o(i.Read_AcOcPinStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_AcOcPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcOc_StatScan
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
</UL>

<P><STRONG><a name="[6e]"></a>Read_IgnPinStat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, input.o(i.Read_IgnPinStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_IgnPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ign_StatScan
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
</UL>

<P><STRONG><a name="[8b]"></a>SIM_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sim.o(i.SIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[3]"></a>SPI0_Isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(i.SPI0_Isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[35]"></a>SPI0_Task</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, motorctrl.o(i.SPI0_Task))
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.System_SpiInit)
</UL>
<P><STRONG><a name="[8c]"></a>SPI_Init</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SpiInit
</UL>

<P><STRONG><a name="[8e]"></a>SPI_SetBaudRate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi.o(i.SPI_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[8f]"></a>SPI_SetCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spi.o(i.SPI_SetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_SetCallback &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SpiInit
</UL>

<P><STRONG><a name="[53]"></a>SW1_ADValue_Conver</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, input.o(i.SW1_ADValue_Conver))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SW1_ADValue_Conver &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
</UL>

<P><STRONG><a name="[54]"></a>SW2_ADValue_Conver</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, input.o(i.SW2_ADValue_Conver))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SW2_ADValue_Conver &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
</UL>

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, start.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; WDOG_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crto.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>System_AdcInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, system.o(i.System_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = System_AdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetCallBack
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[93]"></a>System_GpioInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, system.o(i.System_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = System_GpioInit &rArr; GPIO_PinInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[94]"></a>System_I2cInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system.o(i.System_I2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = System_I2cInit &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_SetCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[96]"></a>System_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = System_Init &rArr; System_SpiInit &rArr; SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SpiInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PwmInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_PitInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_I2cInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GpioInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AdcInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>System_PitInit</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, system.o(i.System_PitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = System_PitInit &rArr; PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[9a]"></a>System_PwmInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(i.System_PwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = System_PwmInit &rArr; FTM_PWMInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWMInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_ClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[99]"></a>System_SpiInit</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, system.o(i.System_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = System_SpiInit &rArr; SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetCallback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[98]"></a>System_UartInit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system.o(i.System_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = System_UartInit &rArr; UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[82]"></a>TLE94108_Send</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, motorctrl.o(i.TLE94108_Send))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Send
</UL>

<P><STRONG><a name="[70]"></a>TPM_ISR</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tick.o(i.TPM_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPM_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_Task
</UL>

<P><STRONG><a name="[a0]"></a>Task_Ad_Scan</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, input.o(i.Task_Ad_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Task_Ad_Scan &rArr; AdValue_Conver &rArr; SW2_ADValue_Conver &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdValue_Conver
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_Conver
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Task_Dg_Ctrl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, output.o(i.Task_Dg_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Task_Dg_Ctrl &rArr; Get2MsTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickVal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2MsTickInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>Task_Dg_Scan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, input.o(i.Task_Dg_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Task_Dg_Scan &rArr; Ign_StatScan &rArr; Read_IgnPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ign_StatScan
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcOc_StatScan
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Task_LIN_Slave</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lin_slave.o(i.Task_LIN_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Task_LIN_Slave &rArr; Lin_SendHandle &rArr; UART_EnableInterrupt &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_SendHandle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_RecvHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Task_Motor_Ctrl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorctrl.o(i.Task_Motor_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Task_Motor_Ctrl &rArr; ModeMotor_MoveSet &rArr; Get1SecTickInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Send
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeMotor_MoveSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixMotor_MoveSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Task_Power_Manage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.Task_Power_Manage))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>TickInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tick.o(i.TickInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[4]"></a>UART0_Isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UART0_Isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[36]"></a>UART0_Task</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lin_slave.o(i.UART0_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART0_Task &rArr; UART_DisableInterrupt &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMsg_Enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(i.System_UartInit)
</UL>
<P><STRONG><a name="[a5]"></a>UART_CheckFlag</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uart.o(i.UART_CheckFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_CheckFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Task
</UL>

<P><STRONG><a name="[a7]"></a>UART_DisableInterrupt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uart.o(i.UART_DisableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DisableInterrupt &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Task
</UL>

<P><STRONG><a name="[7c]"></a>UART_EnableInterrupt</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(i.UART_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_EnableInterrupt &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_SendHandle
</UL>

<P><STRONG><a name="[a6]"></a>UART_GetChar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(i.UART_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_GetChar &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Task
</UL>

<P><STRONG><a name="[a8]"></a>UART_GetFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UART_GetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>

<P><STRONG><a name="[9e]"></a>UART_Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit
</UL>

<P><STRONG><a name="[7b]"></a>UART_PutChar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UART_PutChar))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Task
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_SendHandle
</UL>

<P><STRONG><a name="[9f]"></a>UART_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UART_SetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_UartInit
</UL>

<P><STRONG><a name="[7a]"></a>UpDataSendDiagData</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lin_slave.o(i.UpDataSendDiagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpDataSendDiagData &rArr; LIN_Checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_SendHandle
</UL>

<P><STRONG><a name="[79]"></a>UpDataSendNodeData</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lin_slave.o(i.UpDataSendNodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpDataSendNodeData &rArr; LIN_Checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_SendHandle
</UL>

<P><STRONG><a name="[90]"></a>WDOG_Disable</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, wdog.o(i.WDOG_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDOG_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[aa]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[ae]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5e]"></a>assert_failed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, assert.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWMInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetCallback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1]"></a>default_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(i.default_isr))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.ARM.__AT_0x00000000)
</UL>
<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, test.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; Task_Dg_Scan &rArr; Ign_StatScan &rArr; Read_IgnPinStat &rArr; GPIO_ReadPin &rArr; GPIO_Read &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Manage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Motor_Ctrl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Lcd_Display
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LIN_Slave
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Fan_Ctrl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dg_Scan
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Dg_Ctrl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Ad_Scan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputCtrl_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_Slave_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Display_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[af]"></a>out_char</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io.o(i.out_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = out_char
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntDisable
</UL>

<P><STRONG><a name="[6a]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[84]"></a>PIT_ChannelClrFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pit.o(i.PIT_ChannelClrFlags))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Ch1Isr
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Ch0Isr
</UL>

<P><STRONG><a name="[87]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pit.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[86]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pit.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[8d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[ab]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[ad]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
